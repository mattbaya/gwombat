#!/bin/bash

# GWOMBAT Export Functions
# CSV and Google Sheets export capabilities for all generated lists

# Source configuration and database functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
source "$SCRIPT_DIR/shared-utilities/database_functions.sh" 2>/dev/null || {
    echo "Error: Cannot load database functions"
    exit 1
}

# Export configuration
EXPORT_DIR="${SCRIPT_DIR}/local-config/exports"
mkdir -p "$EXPORT_DIR"

# Color definitions (fallback if not defined elsewhere)
if [[ -z "$RED" ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    WHITE='\033[1;37m'
    NC='\033[0m' # No Color
fi

# Export data to CSV format
export_to_csv() {
    local data="$1"
    local filename="$2"
    local headers="$3"
    local description="$4"
    
    if [[ -z "$data" ]]; then
        echo -e "${RED}Error: No data provided for export${NC}"
        return 1
    fi
    
    if [[ -z "$filename" ]]; then
        filename="gwombat_export_$(date +%Y%m%d_%H%M%S).csv"
    fi
    
    # Ensure filename has .csv extension
    if [[ "$filename" != *.csv ]]; then
        filename="${filename}.csv"
    fi
    
    local export_file="$EXPORT_DIR/$filename"
    
    echo -e "${CYAN}Exporting data to CSV...${NC}"
    
    # Write headers if provided
    if [[ -n "$headers" ]]; then
        echo "$headers" > "$export_file"
    fi
    
    # Write data
    echo "$data" >> "$export_file"
    
    # Add metadata comment at the end
    echo "" >> "$export_file"
    echo "# Export generated by GWOMBAT on $(date)" >> "$export_file"
    echo "# Description: ${description:-GWOMBAT data export}" >> "$export_file"
    echo "# Total records: $(echo "$data" | wc -l)" >> "$export_file"
    
    local file_size=$(du -h "$export_file" | cut -f1)
    local record_count=$(echo "$data" | wc -l)
    
    echo -e "${GREEN}‚úì Export completed successfully${NC}"
    echo -e "  ${WHITE}File:${NC} $export_file"
    echo -e "  ${WHITE}Size:${NC} $file_size"
    echo -e "  ${WHITE}Records:${NC} $record_count"
    echo ""
    
    return 0
}

# Export Google Workspace user list to CSV
export_users_csv() {
    local export_type="$1"  # all, suspended, active, etc.
    local filename_prefix="${2:-users}"
    
    echo -e "${BLUE}=== Export Users to CSV ===${NC}"
    echo ""
    
    local gam_command=""
    local description=""
    local filename=""
    
    case "$export_type" in
        "all")
            gam_command="$GAM print users"
            description="All Google Workspace users"
            filename="${filename_prefix}_all_$(date +%Y%m%d_%H%M%S).csv"
            ;;
        "suspended")
            gam_command="$GAM print users suspended"
            description="Suspended Google Workspace users"
            filename="${filename_prefix}_suspended_$(date +%Y%m%d_%H%M%S).csv"
            ;;
        "active")
            gam_command="$GAM print users query \"isSuspended=false\""
            description="Active Google Workspace users"
            filename="${filename_prefix}_active_$(date +%Y%m%d_%H%M%S).csv"
            ;;
        *)
            echo -e "${RED}Error: Invalid export type. Use: all, suspended, active${NC}"
            return 1
            ;;
    esac
    
    echo -e "${CYAN}Retrieving $description...${NC}"
    
    # Execute GAM command and capture output
    local gam_output
    if ! gam_output=$($gam_command 2>&1); then
        echo -e "${RED}Error executing GAM command: $gam_command${NC}"
        echo -e "${RED}GAM output: $gam_output${NC}"
        return 1
    fi
    
    if [[ -z "$gam_output" ]]; then
        echo -e "${YELLOW}No users found for export type: $export_type${NC}"
        return 1
    fi
    
    # Export to CSV
    local export_file="$EXPORT_DIR/$filename"
    echo "$gam_output" > "$export_file"
    
    # Add GWOMBAT metadata
    echo "" >> "$export_file"
    echo "# Export generated by GWOMBAT on $(date)" >> "$export_file"
    echo "# Export type: $export_type" >> "$export_file"
    echo "# Description: $description" >> "$export_file"
    echo "# GAM command: $gam_command" >> "$export_file"
    
    local file_size=$(du -h "$export_file" | cut -f1)
    local record_count=$(echo "$gam_output" | wc -l)
    
    echo -e "${GREEN}‚úì User export completed successfully${NC}"
    echo -e "  ${WHITE}File:${NC} $export_file"
    echo -e "  ${WHITE}Size:${NC} $file_size"
    echo -e "  ${WHITE}Records:${NC} $record_count"
    echo ""
    
    # Offer to open the file
    read -p "Open exported file? (y/N): " open_file
    if [[ "$open_file" =~ ^[Yy]$ ]]; then
        if command -v open >/dev/null 2>&1; then  # macOS
            open "$export_file"
        elif command -v xdg-open >/dev/null 2>&1; then  # Linux
            xdg-open "$export_file"
        else
            echo -e "${YELLOW}File location: $export_file${NC}"
        fi
    fi
    
    return 0
}

# Export shared drives to CSV
export_shared_drives_csv() {
    local filename="${1:-shared_drives_$(date +%Y%m%d_%H%M%S).csv}"
    
    echo -e "${BLUE}=== Export Shared Drives to CSV ===${NC}"
    echo ""
    
    echo -e "${CYAN}Retrieving shared drives list...${NC}"
    
    # Execute GAM command to get shared drives
    local gam_output
    if ! gam_output=$($GAM print shareddrives 2>&1); then
        echo -e "${RED}Error executing GAM command to get shared drives${NC}"
        echo -e "${RED}GAM output: $gam_output${NC}"
        return 1
    fi
    
    if [[ -z "$gam_output" ]]; then
        echo -e "${YELLOW}No shared drives found${NC}"
        return 1
    fi
    
    # Export to CSV
    local export_file="$EXPORT_DIR/$filename"
    echo "$gam_output" > "$export_file"
    
    # Add GWOMBAT metadata
    echo "" >> "$export_file"
    echo "# Export generated by GWOMBAT on $(date)" >> "$export_file"
    echo "# Description: Google Workspace Shared Drives" >> "$export_file"
    echo "# GAM command: $GAM print shareddrives" >> "$export_file"
    
    local file_size=$(du -h "$export_file" | cut -f1)
    local record_count=$(echo "$gam_output" | wc -l)
    
    echo -e "${GREEN}‚úì Shared drives export completed successfully${NC}"
    echo -e "  ${WHITE}File:${NC} $export_file"
    echo -e "  ${WHITE}Size:${NC} $file_size"
    echo -e "  ${WHITE}Records:${NC} $record_count"
    echo ""
    
    return 0
}

# Export account list from database to CSV
export_account_list_csv() {
    local list_name="$1"
    local filename="$2"
    
    if [[ -z "$list_name" ]]; then
        echo -e "${RED}Error: List name is required${NC}"
        return 1
    fi
    
    if [[ -z "$filename" ]]; then
        filename="account_list_${list_name}_$(date +%Y%m%d_%H%M%S).csv"
    fi
    
    echo -e "${BLUE}=== Export Account List to CSV ===${NC}"
    echo ""
    echo -e "${CYAN}Exporting list: $list_name${NC}"
    
    # Get list data from database
    local list_data=$(sqlite3 "$DB_FILE" "
        SELECT a.email, a.name, a.ou_path, a.suspended, a.created_at, a.updated_at
        FROM accounts a 
        JOIN account_list_memberships alm ON a.id = alm.account_id 
        JOIN account_lists l ON alm.list_id = l.id 
        WHERE l.name = '$list_name'
        ORDER BY a.email;
    ")
    
    if [[ -z "$list_data" ]]; then
        echo -e "${YELLOW}No accounts found in list: $list_name${NC}"
        return 1
    fi
    
    # Prepare CSV with headers
    local headers="Email,Name,OU Path,Suspended,Created At,Updated At"
    local export_file="$EXPORT_DIR/$filename"
    
    echo "$headers" > "$export_file"
    echo "$list_data" | sed 's/|/,/g' >> "$export_file"
    
    # Add metadata
    echo "" >> "$export_file"
    echo "# Export generated by GWOMBAT on $(date)" >> "$export_file"
    echo "# Source: Account list '$list_name'" >> "$export_file"
    echo "# Description: Accounts from GWOMBAT database list" >> "$export_file"
    
    local file_size=$(du -h "$export_file" | cut -f1)
    local record_count=$(echo "$list_data" | wc -l)
    
    echo -e "${GREEN}‚úì Account list export completed successfully${NC}"
    echo -e "  ${WHITE}List:${NC} $list_name"
    echo -e "  ${WHITE}File:${NC} $export_file"
    echo -e "  ${WHITE}Size:${NC} $file_size"
    echo -e "  ${WHITE}Records:${NC} $record_count"
    echo ""
    
    return 0
}

# Main export menu
export_data_menu() {
    while true; do
        clear
        echo -e "${GREEN}=== GWOMBAT Data Export ===${NC}"
        echo ""
        echo -e "${CYAN}Export data to CSV format for external analysis${NC}"
        echo ""
        
        echo "1. üë• Export All Users"
        echo "2. üö´ Export Suspended Users" 
        echo "3. ‚úÖ Export Active Users"
        echo "4. üóÇÔ∏è Export Shared Drives"
        echo "5. üìã Export Account List (from database)"
        echo "6. üìä Export Custom GAM Query"
        echo ""
        echo "7. üìÅ Open Exports Folder"
        echo "8. üßπ Clean Old Export Files"
        echo ""
        echo "b. ‚¨ÖÔ∏è Back to previous menu"
        echo "m. üè† Main menu"
        echo "x. ‚ùå Exit"
        echo ""
        
        read -p "Select export option (1-8, b, m, x): " export_choice
        
        case "$export_choice" in
            1) export_users_csv "all" ;;
            2) export_users_csv "suspended" ;;
            3) export_users_csv "active" ;;
            4) export_shared_drives_csv ;;
            5) 
                echo ""
                read -p "Enter account list name: " list_name
                if [[ -n "$list_name" ]]; then
                    export_account_list_csv "$list_name"
                else
                    echo -e "${RED}List name cannot be empty${NC}"
                fi
                read -p "Press Enter to continue..."
                ;;
            6)
                echo ""
                echo -e "${CYAN}Custom GAM Query Export${NC}"
                echo "Example: print users query \"department=IT\""
                read -p "Enter GAM command (without 'gam '): " gam_query
                if [[ -n "$gam_query" ]]; then
                    echo -e "${CYAN}Executing: $GAM $gam_query${NC}"
                    local query_output
                    if query_output=$($GAM $gam_query 2>&1); then
                        local custom_filename="custom_query_$(date +%Y%m%d_%H%M%S).csv"
                        export_to_csv "$query_output" "$custom_filename" "" "Custom GAM query: $gam_query"
                    else
                        echo -e "${RED}Error executing GAM query: $query_output${NC}"
                    fi
                else
                    echo -e "${RED}GAM query cannot be empty${NC}"
                fi
                read -p "Press Enter to continue..."
                ;;
            7)
                echo -e "${CYAN}Opening exports folder: $EXPORT_DIR${NC}"
                if command -v open >/dev/null 2>&1; then  # macOS
                    open "$EXPORT_DIR"
                elif command -v xdg-open >/dev/null 2>&1; then  # Linux
                    xdg-open "$EXPORT_DIR"
                else
                    echo -e "${YELLOW}Exports folder: $EXPORT_DIR${NC}"
                    ls -la "$EXPORT_DIR"
                fi
                read -p "Press Enter to continue..."
                ;;
            8)
                echo -e "${CYAN}Cleaning old export files...${NC}"
                echo "Files older than 30 days will be removed."
                read -p "Continue? (y/N): " confirm_clean
                if [[ "$confirm_clean" =~ ^[Yy]$ ]]; then
                    local deleted_count=$(find "$EXPORT_DIR" -name "*.csv" -mtime +30 -delete -print | wc -l)
                    echo -e "${GREEN}‚úì Cleaned $deleted_count old export files${NC}"
                else
                    echo "Cleanup cancelled."
                fi
                read -p "Press Enter to continue..."
                ;;
            b|B) return ;;
            m|M) main_menu ;;
            x|X) exit 0 ;;
            *)
                echo -e "${RED}Invalid option${NC}"
                read -p "Press Enter to continue..."
                ;;
        esac
    done
}

# Quick export function for integration with other menus
quick_export() {
    local data="$1"
    local export_type="$2"
    local description="$3"
    
    if [[ -z "$data" ]]; then
        echo -e "${YELLOW}No data to export${NC}"
        return 1
    fi
    
    echo ""
    read -p "Export this data to CSV? (y/N): " export_confirm
    if [[ "$export_confirm" =~ ^[Yy]$ ]]; then
        local filename="${export_type}_$(date +%Y%m%d_%H%M%S).csv"
        export_to_csv "$data" "$filename" "" "$description"
    fi
}

# Initialize export directory and check dependencies
init_export_system() {
    mkdir -p "$EXPORT_DIR"
    
    # Check if GAM is available
    if ! command -v "$GAM" >/dev/null 2>&1; then
        echo -e "${YELLOW}Warning: GAM not found. Some export functions may not work.${NC}"
        echo -e "${YELLOW}GAM path: ${GAM:-not set}${NC}"
    fi
    
    echo -e "${GREEN}‚úì Export system initialized${NC}"
    echo -e "  ${WHITE}Export directory:${NC} $EXPORT_DIR"
}

# If script is called directly, run the export menu
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    init_export_system
    export_data_menu
fi